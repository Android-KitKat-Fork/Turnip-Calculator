{"version":3,"sources":["../node_modules/cuint/lib/uint32.js","../node_modules/cuint/lib/uint64.js","../node_modules/cuint/index.js","v2/calculator.js","v2/worker.js"],"names":["UINT32","UINT64","require","possiblePatterns","patternReducer","initCalc","arg","plus","multiply","clone","xor","shiftRight","add","initContext","seed","$c0","$c1","$c2","getUINT32","$c","$c3","n","shiftLeft","splice","randint","min","max","toNumber","subtract","randfloat","a","b","val","or","view","DataView","ArrayBuffer","setUint32","getFloat32","randbool","and","intceil","Math","trunc","calculate","pattern","basePrice","chance","whatPattern","sellPrices","Array","work","decPhaseLen1","decPhaseLen2","peakStart","hiPhaseLen1","hiPhaseLen2and3","hiPhaseLen3","rate","i","$average","array","index","count","next","$minMax","current","result","makePaternFilter","patterns","map","options","length","filter","v","optimizeFilters","filters","minMaxPatterns","$filters","from","patternFilter","yieldCalculate","total","average","minMax","Infinity","results","randomStart","random","ii","calculator","every","value","includes","forEach","yieldCalculateByTime","ms","flag","Date","now","done","module","exports","paused","instance","workUnit","setTimeout","postMessage","onmessage","data","action","args","console","log"],"mappings":"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","file":"worker.c8e3fa05.js","sourceRoot":"../src","sourcesContent":["/**\n\tC-like unsigned 32 bits integers in Javascript\n\tCopyright (C) 2013, Pierre Curto\n\tMIT license\n */\n;(function (root) {\n\n\t// Local cache for typical radices\n\tvar radixPowerCache = {\n\t\t36: UINT32( Math.pow(36, 5) )\n\t,\t16: UINT32( Math.pow(16, 7) )\n\t,\t10: UINT32( Math.pow(10, 9) )\n\t,\t2:  UINT32( Math.pow(2, 30) )\n\t}\n\tvar radixCache = {\n\t\t36: UINT32(36)\n\t,\t16: UINT32(16)\n\t,\t10: UINT32(10)\n\t,\t2:  UINT32(2)\n\t}\n\n\t/**\n\t *\tRepresents an unsigned 32 bits integer\n\t * @constructor\n\t * @param {Number|String|Number} low bits     | integer as a string \t\t | integer as a number\n\t * @param {Number|Number|Undefined} high bits | radix (optional, default=10)\n\t * @return \n\t */\n\tfunction UINT32 (l, h) {\n\t\tif ( !(this instanceof UINT32) )\n\t\t\treturn new UINT32(l, h)\n\n\t\tthis._low = 0\n\t\tthis._high = 0\n\t\tthis.remainder = null\n\t\tif (typeof h == 'undefined')\n\t\t\treturn fromNumber.call(this, l)\n\n\t\tif (typeof l == 'string')\n\t\t\treturn fromString.call(this, l, h)\n\n\t\tfromBits.call(this, l, h)\n\t}\n\n\t/**\n\t * Set the current _UINT32_ object with its low and high bits\n\t * @method fromBits\n\t * @param {Number} low bits\n\t * @param {Number} high bits\n\t * @return ThisExpression\n\t */\n\tfunction fromBits (l, h) {\n\t\tthis._low = l | 0\n\t\tthis._high = h | 0\n\n\t\treturn this\n\t}\n\tUINT32.prototype.fromBits = fromBits\n\n\t/**\n\t * Set the current _UINT32_ object from a number\n\t * @method fromNumber\n\t * @param {Number} number\n\t * @return ThisExpression\n\t */\n\tfunction fromNumber (value) {\n\t\tthis._low = value & 0xFFFF\n\t\tthis._high = value >>> 16\n\n\t\treturn this\n\t}\n\tUINT32.prototype.fromNumber = fromNumber\n\n\t/**\n\t * Set the current _UINT32_ object from a string\n\t * @method fromString\n\t * @param {String} integer as a string\n\t * @param {Number} radix (optional, default=10)\n\t * @return ThisExpression\n\t */\n\tfunction fromString (s, radix) {\n\t\tvar value = parseInt(s, radix || 10)\n\n\t\tthis._low = value & 0xFFFF\n\t\tthis._high = value >>> 16\n\n\t\treturn this\n\t}\n\tUINT32.prototype.fromString = fromString\n\n\t/**\n\t * Convert this _UINT32_ to a number\n\t * @method toNumber\n\t * @return {Number} the converted UINT32\n\t */\n\tUINT32.prototype.toNumber = function () {\n\t\treturn (this._high * 65536) + this._low\n\t}\n\n\t/**\n\t * Convert this _UINT32_ to a string\n\t * @method toString\n\t * @param {Number} radix (optional, default=10)\n\t * @return {String} the converted UINT32\n\t */\n\tUINT32.prototype.toString = function (radix) {\n\t\treturn this.toNumber().toString(radix || 10)\n\t}\n\n\t/**\n\t * Add two _UINT32_. The current _UINT32_ stores the result\n\t * @method add\n\t * @param {Object} other UINT32\n\t * @return ThisExpression\n\t */\n\tUINT32.prototype.add = function (other) {\n\t\tvar a00 = this._low + other._low\n\t\tvar a16 = a00 >>> 16\n\n\t\ta16 += this._high + other._high\n\n\t\tthis._low = a00 & 0xFFFF\n\t\tthis._high = a16 & 0xFFFF\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Subtract two _UINT32_. The current _UINT32_ stores the result\n\t * @method subtract\n\t * @param {Object} other UINT32\n\t * @return ThisExpression\n\t */\n\tUINT32.prototype.subtract = function (other) {\n\t\t//TODO inline\n\t\treturn this.add( other.clone().negate() )\n\t}\n\n\t/**\n\t * Multiply two _UINT32_. The current _UINT32_ stores the result\n\t * @method multiply\n\t * @param {Object} other UINT32\n\t * @return ThisExpression\n\t */\n\tUINT32.prototype.multiply = function (other) {\n\t\t/*\n\t\t\ta = a00 + a16\n\t\t\tb = b00 + b16\n\t\t\ta*b = (a00 + a16)(b00 + b16)\n\t\t\t\t= a00b00 + a00b16 + a16b00 + a16b16\n\n\t\t\ta16b16 overflows the 32bits\n\t\t */\n\t\tvar a16 = this._high\n\t\tvar a00 = this._low\n\t\tvar b16 = other._high\n\t\tvar b00 = other._low\n\n/* Removed to increase speed under normal circumstances (i.e. not multiplying by 0 or 1)\n\t\t// this == 0 or other == 1: nothing to do\n\t\tif ((a00 == 0 && a16 == 0) || (b00 == 1 && b16 == 0)) return this\n\n\t\t// other == 0 or this == 1: this = other\n\t\tif ((b00 == 0 && b16 == 0) || (a00 == 1 && a16 == 0)) {\n\t\t\tthis._low = other._low\n\t\t\tthis._high = other._high\n\t\t\treturn this\n\t\t}\n*/\n\n\t\tvar c16, c00\n\t\tc00 = a00 * b00\n\t\tc16 = c00 >>> 16\n\n\t\tc16 += a16 * b00\n\t\tc16 &= 0xFFFF\t\t// Not required but improves performance\n\t\tc16 += a00 * b16\n\n\t\tthis._low = c00 & 0xFFFF\n\t\tthis._high = c16 & 0xFFFF\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Divide two _UINT32_. The current _UINT32_ stores the result.\n\t * The remainder is made available as the _remainder_ property on\n\t * the _UINT32_ object. It can be null, meaning there are no remainder.\n\t * @method div\n\t * @param {Object} other UINT32\n\t * @return ThisExpression\n\t */\n\tUINT32.prototype.div = function (other) {\n\t\tif ( (other._low == 0) && (other._high == 0) ) throw Error('division by zero')\n\n\t\t// other == 1\n\t\tif (other._high == 0 && other._low == 1) {\n\t\t\tthis.remainder = new UINT32(0)\n\t\t\treturn this\n\t\t}\n\n\t\t// other > this: 0\n\t\tif ( other.gt(this) ) {\n\t\t\tthis.remainder = this.clone()\n\t\t\tthis._low = 0\n\t\t\tthis._high = 0\n\t\t\treturn this\n\t\t}\n\t\t// other == this: 1\n\t\tif ( this.eq(other) ) {\n\t\t\tthis.remainder = new UINT32(0)\n\t\t\tthis._low = 1\n\t\t\tthis._high = 0\n\t\t\treturn this\n\t\t}\n\n\t\t// Shift the divisor left until it is higher than the dividend\n\t\tvar _other = other.clone()\n\t\tvar i = -1\n\t\twhile ( !this.lt(_other) ) {\n\t\t\t// High bit can overflow the default 16bits\n\t\t\t// Its ok since we right shift after this loop\n\t\t\t// The overflown bit must be kept though\n\t\t\t_other.shiftLeft(1, true)\n\t\t\ti++\n\t\t}\n\n\t\t// Set the remainder\n\t\tthis.remainder = this.clone()\n\t\t// Initialize the current result to 0\n\t\tthis._low = 0\n\t\tthis._high = 0\n\t\tfor (; i >= 0; i--) {\n\t\t\t_other.shiftRight(1)\n\t\t\t// If shifted divisor is smaller than the dividend\n\t\t\t// then subtract it from the dividend\n\t\t\tif ( !this.remainder.lt(_other) ) {\n\t\t\t\tthis.remainder.subtract(_other)\n\t\t\t\t// Update the current result\n\t\t\t\tif (i >= 16) {\n\t\t\t\t\tthis._high |= 1 << (i - 16)\n\t\t\t\t} else {\n\t\t\t\t\tthis._low |= 1 << i\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Negate the current _UINT32_\n\t * @method negate\n\t * @return ThisExpression\n\t */\n\tUINT32.prototype.negate = function () {\n\t\tvar v = ( ~this._low & 0xFFFF ) + 1\n\t\tthis._low = v & 0xFFFF\n\t\tthis._high = (~this._high + (v >>> 16)) & 0xFFFF\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Equals\n\t * @method eq\n\t * @param {Object} other UINT32\n\t * @return {Boolean}\n\t */\n\tUINT32.prototype.equals = UINT32.prototype.eq = function (other) {\n\t\treturn (this._low == other._low) && (this._high == other._high)\n\t}\n\n\t/**\n\t * Greater than (strict)\n\t * @method gt\n\t * @param {Object} other UINT32\n\t * @return {Boolean}\n\t */\n\tUINT32.prototype.greaterThan = UINT32.prototype.gt = function (other) {\n\t\tif (this._high > other._high) return true\n\t\tif (this._high < other._high) return false\n\t\treturn this._low > other._low\n\t}\n\n\t/**\n\t * Less than (strict)\n\t * @method lt\n\t * @param {Object} other UINT32\n\t * @return {Boolean}\n\t */\n\tUINT32.prototype.lessThan = UINT32.prototype.lt = function (other) {\n\t\tif (this._high < other._high) return true\n\t\tif (this._high > other._high) return false\n\t\treturn this._low < other._low\n\t}\n\n\t/**\n\t * Bitwise OR\n\t * @method or\n\t * @param {Object} other UINT32\n\t * @return ThisExpression\n\t */\n\tUINT32.prototype.or = function (other) {\n\t\tthis._low |= other._low\n\t\tthis._high |= other._high\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise AND\n\t * @method and\n\t * @param {Object} other UINT32\n\t * @return ThisExpression\n\t */\n\tUINT32.prototype.and = function (other) {\n\t\tthis._low &= other._low\n\t\tthis._high &= other._high\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise NOT\n\t * @method not\n\t * @return ThisExpression\n\t */\n\tUINT32.prototype.not = function() {\n\t\tthis._low = ~this._low & 0xFFFF\n\t\tthis._high = ~this._high & 0xFFFF\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise XOR\n\t * @method xor\n\t * @param {Object} other UINT32\n\t * @return ThisExpression\n\t */\n\tUINT32.prototype.xor = function (other) {\n\t\tthis._low ^= other._low\n\t\tthis._high ^= other._high\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise shift right\n\t * @method shiftRight\n\t * @param {Number} number of bits to shift\n\t * @return ThisExpression\n\t */\n\tUINT32.prototype.shiftRight = UINT32.prototype.shiftr = function (n) {\n\t\tif (n > 16) {\n\t\t\tthis._low = this._high >> (n - 16)\n\t\t\tthis._high = 0\n\t\t} else if (n == 16) {\n\t\t\tthis._low = this._high\n\t\t\tthis._high = 0\n\t\t} else {\n\t\t\tthis._low = (this._low >> n) | ( (this._high << (16-n)) & 0xFFFF )\n\t\t\tthis._high >>= n\n\t\t}\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise shift left\n\t * @method shiftLeft\n\t * @param {Number} number of bits to shift\n\t * @param {Boolean} allow overflow\n\t * @return ThisExpression\n\t */\n\tUINT32.prototype.shiftLeft = UINT32.prototype.shiftl = function (n, allowOverflow) {\n\t\tif (n > 16) {\n\t\t\tthis._high = this._low << (n - 16)\n\t\t\tthis._low = 0\n\t\t\tif (!allowOverflow) {\n\t\t\t\tthis._high &= 0xFFFF\n\t\t\t}\n\t\t} else if (n == 16) {\n\t\t\tthis._high = this._low\n\t\t\tthis._low = 0\n\t\t} else {\n\t\t\tthis._high = (this._high << n) | (this._low >> (16-n))\n\t\t\tthis._low = (this._low << n) & 0xFFFF\n\t\t\tif (!allowOverflow) {\n\t\t\t\t// Overflow only allowed on the high bits...\n\t\t\t\tthis._high &= 0xFFFF\n\t\t\t}\n\t\t}\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise rotate left\n\t * @method rotl\n\t * @param {Number} number of bits to rotate\n\t * @return ThisExpression\n\t */\n\tUINT32.prototype.rotateLeft = UINT32.prototype.rotl = function (n) {\n\t\tvar v = (this._high << 16) | this._low\n\t\tv = (v << n) | (v >>> (32 - n))\n\t\tthis._low = v & 0xFFFF\n\t\tthis._high = v >>> 16\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise rotate right\n\t * @method rotr\n\t * @param {Number} number of bits to rotate\n\t * @return ThisExpression\n\t */\n\tUINT32.prototype.rotateRight = UINT32.prototype.rotr = function (n) {\n\t\tvar v = (this._high << 16) | this._low\n\t\tv = (v >>> n) | (v << (32 - n))\n\t\tthis._low = v & 0xFFFF\n\t\tthis._high = v >>> 16\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Clone the current _UINT32_\n\t * @method clone\n\t * @return {Object} cloned UINT32\n\t */\n\tUINT32.prototype.clone = function () {\n\t\treturn new UINT32(this._low, this._high)\n\t}\n\n\tif (typeof define != 'undefined' && define.amd) {\n\t\t// AMD / RequireJS\n\t\tdefine([], function () {\n\t\t\treturn UINT32\n\t\t})\n\t} else if (typeof module != 'undefined' && module.exports) {\n\t\t// Node.js\n\t\tmodule.exports = UINT32\n\t} else {\n\t\t// Browser\n\t\troot['UINT32'] = UINT32\n\t}\n\n})(this)\n","/**\n\tC-like unsigned 64 bits integers in Javascript\n\tCopyright (C) 2013, Pierre Curto\n\tMIT license\n */\n;(function (root) {\n\n\t// Local cache for typical radices\n\tvar radixPowerCache = {\n\t\t16: UINT64( Math.pow(16, 5) )\n\t,\t10: UINT64( Math.pow(10, 5) )\n\t,\t2:  UINT64( Math.pow(2, 5) )\n\t}\n\tvar radixCache = {\n\t\t16: UINT64(16)\n\t,\t10: UINT64(10)\n\t,\t2:  UINT64(2)\n\t}\n\n\t/**\n\t *\tRepresents an unsigned 64 bits integer\n\t * @constructor\n\t * @param {Number} first low bits (8)\n\t * @param {Number} second low bits (8)\n\t * @param {Number} first high bits (8)\n\t * @param {Number} second high bits (8)\n\t * or\n\t * @param {Number} low bits (32)\n\t * @param {Number} high bits (32)\n\t * or\n\t * @param {String|Number} integer as a string \t\t | integer as a number\n\t * @param {Number|Undefined} radix (optional, default=10)\n\t * @return \n\t */\n\tfunction UINT64 (a00, a16, a32, a48) {\n\t\tif ( !(this instanceof UINT64) )\n\t\t\treturn new UINT64(a00, a16, a32, a48)\n\n\t\tthis.remainder = null\n\t\tif (typeof a00 == 'string')\n\t\t\treturn fromString.call(this, a00, a16)\n\n\t\tif (typeof a16 == 'undefined')\n\t\t\treturn fromNumber.call(this, a00)\n\n\t\tfromBits.apply(this, arguments)\n\t}\n\n\t/**\n\t * Set the current _UINT64_ object with its low and high bits\n\t * @method fromBits\n\t * @param {Number} first low bits (8)\n\t * @param {Number} second low bits (8)\n\t * @param {Number} first high bits (8)\n\t * @param {Number} second high bits (8)\n\t * or\n\t * @param {Number} low bits (32)\n\t * @param {Number} high bits (32)\n\t * @return ThisExpression\n\t */\n\tfunction fromBits (a00, a16, a32, a48) {\n\t\tif (typeof a32 == 'undefined') {\n\t\t\tthis._a00 = a00 & 0xFFFF\n\t\t\tthis._a16 = a00 >>> 16\n\t\t\tthis._a32 = a16 & 0xFFFF\n\t\t\tthis._a48 = a16 >>> 16\n\t\t\treturn this\n\t\t}\n\n\t\tthis._a00 = a00 | 0\n\t\tthis._a16 = a16 | 0\n\t\tthis._a32 = a32 | 0\n\t\tthis._a48 = a48 | 0\n\n\t\treturn this\n\t}\n\tUINT64.prototype.fromBits = fromBits\n\n\t/**\n\t * Set the current _UINT64_ object from a number\n\t * @method fromNumber\n\t * @param {Number} number\n\t * @return ThisExpression\n\t */\n\tfunction fromNumber (value) {\n\t\tthis._a00 = value & 0xFFFF\n\t\tthis._a16 = value >>> 16\n\t\tthis._a32 = 0\n\t\tthis._a48 = 0\n\n\t\treturn this\n\t}\n\tUINT64.prototype.fromNumber = fromNumber\n\n\t/**\n\t * Set the current _UINT64_ object from a string\n\t * @method fromString\n\t * @param {String} integer as a string\n\t * @param {Number} radix (optional, default=10)\n\t * @return ThisExpression\n\t */\n\tfunction fromString (s, radix) {\n\t\tradix = radix || 10\n\n\t\tthis._a00 = 0\n\t\tthis._a16 = 0\n\t\tthis._a32 = 0\n\t\tthis._a48 = 0\n\n\t\t/*\n\t\t\tIn Javascript, bitwise operators only operate on the first 32 bits \n\t\t\tof a number, even though parseInt() encodes numbers with a 53 bits \n\t\t\tmantissa.\n\t\t\tTherefore UINT64(<Number>) can only work on 32 bits.\n\t\t\tThe radix maximum value is 36 (as per ECMA specs) (26 letters + 10 digits)\n\t\t\tmaximum input value is m = 32bits as 1 = 2^32 - 1\n\t\t\tSo the maximum substring length n is:\n\t\t\t36^(n+1) - 1 = 2^32 - 1\n\t\t\t36^(n+1) = 2^32\n\t\t\t(n+1)ln(36) = 32ln(2)\n\t\t\tn = 32ln(2)/ln(36) - 1\n\t\t\tn = 5.189644915687692\n\t\t\tn = 5\n\t\t */\n\t\tvar radixUint = radixPowerCache[radix] || new UINT64( Math.pow(radix, 5) )\n\n\t\tfor (var i = 0, len = s.length; i < len; i += 5) {\n\t\t\tvar size = Math.min(5, len - i)\n\t\t\tvar value = parseInt( s.slice(i, i + size), radix )\n\t\t\tthis.multiply(\n\t\t\t\t\tsize < 5\n\t\t\t\t\t\t? new UINT64( Math.pow(radix, size) )\n\t\t\t\t\t\t: radixUint\n\t\t\t\t)\n\t\t\t\t.add( new UINT64(value) )\n\t\t}\n\n\t\treturn this\n\t}\n\tUINT64.prototype.fromString = fromString\n\n\t/**\n\t * Convert this _UINT64_ to a number (last 32 bits are dropped)\n\t * @method toNumber\n\t * @return {Number} the converted UINT64\n\t */\n\tUINT64.prototype.toNumber = function () {\n\t\treturn (this._a16 * 65536) + this._a00\n\t}\n\n\t/**\n\t * Convert this _UINT64_ to a string\n\t * @method toString\n\t * @param {Number} radix (optional, default=10)\n\t * @return {String} the converted UINT64\n\t */\n\tUINT64.prototype.toString = function (radix) {\n\t\tradix = radix || 10\n\t\tvar radixUint = radixCache[radix] || new UINT64(radix)\n\n\t\tif ( !this.gt(radixUint) ) return this.toNumber().toString(radix)\n\n\t\tvar self = this.clone()\n\t\tvar res = new Array(64)\n\t\tfor (var i = 63; i >= 0; i--) {\n\t\t\tself.div(radixUint)\n\t\t\tres[i] = self.remainder.toNumber().toString(radix)\n\t\t\tif ( !self.gt(radixUint) ) break\n\t\t}\n\t\tres[i-1] = self.toNumber().toString(radix)\n\n\t\treturn res.join('')\n\t}\n\n\t/**\n\t * Add two _UINT64_. The current _UINT64_ stores the result\n\t * @method add\n\t * @param {Object} other UINT64\n\t * @return ThisExpression\n\t */\n\tUINT64.prototype.add = function (other) {\n\t\tvar a00 = this._a00 + other._a00\n\n\t\tvar a16 = a00 >>> 16\n\t\ta16 += this._a16 + other._a16\n\n\t\tvar a32 = a16 >>> 16\n\t\ta32 += this._a32 + other._a32\n\n\t\tvar a48 = a32 >>> 16\n\t\ta48 += this._a48 + other._a48\n\n\t\tthis._a00 = a00 & 0xFFFF\n\t\tthis._a16 = a16 & 0xFFFF\n\t\tthis._a32 = a32 & 0xFFFF\n\t\tthis._a48 = a48 & 0xFFFF\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Subtract two _UINT64_. The current _UINT64_ stores the result\n\t * @method subtract\n\t * @param {Object} other UINT64\n\t * @return ThisExpression\n\t */\n\tUINT64.prototype.subtract = function (other) {\n\t\treturn this.add( other.clone().negate() )\n\t}\n\n\t/**\n\t * Multiply two _UINT64_. The current _UINT64_ stores the result\n\t * @method multiply\n\t * @param {Object} other UINT64\n\t * @return ThisExpression\n\t */\n\tUINT64.prototype.multiply = function (other) {\n\t\t/*\n\t\t\ta = a00 + a16 + a32 + a48\n\t\t\tb = b00 + b16 + b32 + b48\n\t\t\ta*b = (a00 + a16 + a32 + a48)(b00 + b16 + b32 + b48)\n\t\t\t\t= a00b00 + a00b16 + a00b32 + a00b48\n\t\t\t\t+ a16b00 + a16b16 + a16b32 + a16b48\n\t\t\t\t+ a32b00 + a32b16 + a32b32 + a32b48\n\t\t\t\t+ a48b00 + a48b16 + a48b32 + a48b48\n\n\t\t\ta16b48, a32b32, a48b16, a48b32 and a48b48 overflow the 64 bits\n\t\t\tso it comes down to:\n\t\t\ta*b\t= a00b00 + a00b16 + a00b32 + a00b48\n\t\t\t\t+ a16b00 + a16b16 + a16b32\n\t\t\t\t+ a32b00 + a32b16\n\t\t\t\t+ a48b00\n\t\t\t\t= a00b00\n\t\t\t\t+ a00b16 + a16b00\n\t\t\t\t+ a00b32 + a16b16 + a32b00\n\t\t\t\t+ a00b48 + a16b32 + a32b16 + a48b00\n\t\t */\n\t\tvar a00 = this._a00\n\t\tvar a16 = this._a16\n\t\tvar a32 = this._a32\n\t\tvar a48 = this._a48\n\t\tvar b00 = other._a00\n\t\tvar b16 = other._a16\n\t\tvar b32 = other._a32\n\t\tvar b48 = other._a48\n\n\t\tvar c00 = a00 * b00\n\n\t\tvar c16 = c00 >>> 16\n\t\tc16 += a00 * b16\n\t\tvar c32 = c16 >>> 16\n\t\tc16 &= 0xFFFF\n\t\tc16 += a16 * b00\n\n\t\tc32 += c16 >>> 16\n\t\tc32 += a00 * b32\n\t\tvar c48 = c32 >>> 16\n\t\tc32 &= 0xFFFF\n\t\tc32 += a16 * b16\n\t\tc48 += c32 >>> 16\n\t\tc32 &= 0xFFFF\n\t\tc32 += a32 * b00\n\n\t\tc48 += c32 >>> 16\n\t\tc48 += a00 * b48\n\t\tc48 &= 0xFFFF\n\t\tc48 += a16 * b32\n\t\tc48 &= 0xFFFF\n\t\tc48 += a32 * b16\n\t\tc48 &= 0xFFFF\n\t\tc48 += a48 * b00\n\n\t\tthis._a00 = c00 & 0xFFFF\n\t\tthis._a16 = c16 & 0xFFFF\n\t\tthis._a32 = c32 & 0xFFFF\n\t\tthis._a48 = c48 & 0xFFFF\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Divide two _UINT64_. The current _UINT64_ stores the result.\n\t * The remainder is made available as the _remainder_ property on\n\t * the _UINT64_ object. It can be null, meaning there are no remainder.\n\t * @method div\n\t * @param {Object} other UINT64\n\t * @return ThisExpression\n\t */\n\tUINT64.prototype.div = function (other) {\n\t\tif ( (other._a16 == 0) && (other._a32 == 0) && (other._a48 == 0) ) {\n\t\t\tif (other._a00 == 0) throw Error('division by zero')\n\n\t\t\t// other == 1: this\n\t\t\tif (other._a00 == 1) {\n\t\t\t\tthis.remainder = new UINT64(0)\n\t\t\t\treturn this\n\t\t\t}\n\t\t}\n\n\t\t// other > this: 0\n\t\tif ( other.gt(this) ) {\n\t\t\tthis.remainder = this.clone()\n\t\t\tthis._a00 = 0\n\t\t\tthis._a16 = 0\n\t\t\tthis._a32 = 0\n\t\t\tthis._a48 = 0\n\t\t\treturn this\n\t\t}\n\t\t// other == this: 1\n\t\tif ( this.eq(other) ) {\n\t\t\tthis.remainder = new UINT64(0)\n\t\t\tthis._a00 = 1\n\t\t\tthis._a16 = 0\n\t\t\tthis._a32 = 0\n\t\t\tthis._a48 = 0\n\t\t\treturn this\n\t\t}\n\n\t\t// Shift the divisor left until it is higher than the dividend\n\t\tvar _other = other.clone()\n\t\tvar i = -1\n\t\twhile ( !this.lt(_other) ) {\n\t\t\t// High bit can overflow the default 16bits\n\t\t\t// Its ok since we right shift after this loop\n\t\t\t// The overflown bit must be kept though\n\t\t\t_other.shiftLeft(1, true)\n\t\t\ti++\n\t\t}\n\n\t\t// Set the remainder\n\t\tthis.remainder = this.clone()\n\t\t// Initialize the current result to 0\n\t\tthis._a00 = 0\n\t\tthis._a16 = 0\n\t\tthis._a32 = 0\n\t\tthis._a48 = 0\n\t\tfor (; i >= 0; i--) {\n\t\t\t_other.shiftRight(1)\n\t\t\t// If shifted divisor is smaller than the dividend\n\t\t\t// then subtract it from the dividend\n\t\t\tif ( !this.remainder.lt(_other) ) {\n\t\t\t\tthis.remainder.subtract(_other)\n\t\t\t\t// Update the current result\n\t\t\t\tif (i >= 48) {\n\t\t\t\t\tthis._a48 |= 1 << (i - 48)\n\t\t\t\t} else if (i >= 32) {\n\t\t\t\t\tthis._a32 |= 1 << (i - 32)\n\t\t\t\t} else if (i >= 16) {\n\t\t\t\t\tthis._a16 |= 1 << (i - 16)\n\t\t\t\t} else {\n\t\t\t\t\tthis._a00 |= 1 << i\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Negate the current _UINT64_\n\t * @method negate\n\t * @return ThisExpression\n\t */\n\tUINT64.prototype.negate = function () {\n\t\tvar v = ( ~this._a00 & 0xFFFF ) + 1\n\t\tthis._a00 = v & 0xFFFF\n\t\tv = (~this._a16 & 0xFFFF) + (v >>> 16)\n\t\tthis._a16 = v & 0xFFFF\n\t\tv = (~this._a32 & 0xFFFF) + (v >>> 16)\n\t\tthis._a32 = v & 0xFFFF\n\t\tthis._a48 = (~this._a48 + (v >>> 16)) & 0xFFFF\n\n\t\treturn this\n\t}\n\n\t/**\n\n\t * @method eq\n\t * @param {Object} other UINT64\n\t * @return {Boolean}\n\t */\n\tUINT64.prototype.equals = UINT64.prototype.eq = function (other) {\n\t\treturn (this._a48 == other._a48) && (this._a00 == other._a00)\n\t\t\t && (this._a32 == other._a32) && (this._a16 == other._a16)\n\t}\n\n\t/**\n\t * Greater than (strict)\n\t * @method gt\n\t * @param {Object} other UINT64\n\t * @return {Boolean}\n\t */\n\tUINT64.prototype.greaterThan = UINT64.prototype.gt = function (other) {\n\t\tif (this._a48 > other._a48) return true\n\t\tif (this._a48 < other._a48) return false\n\t\tif (this._a32 > other._a32) return true\n\t\tif (this._a32 < other._a32) return false\n\t\tif (this._a16 > other._a16) return true\n\t\tif (this._a16 < other._a16) return false\n\t\treturn this._a00 > other._a00\n\t}\n\n\t/**\n\t * Less than (strict)\n\t * @method lt\n\t * @param {Object} other UINT64\n\t * @return {Boolean}\n\t */\n\tUINT64.prototype.lessThan = UINT64.prototype.lt = function (other) {\n\t\tif (this._a48 < other._a48) return true\n\t\tif (this._a48 > other._a48) return false\n\t\tif (this._a32 < other._a32) return true\n\t\tif (this._a32 > other._a32) return false\n\t\tif (this._a16 < other._a16) return true\n\t\tif (this._a16 > other._a16) return false\n\t\treturn this._a00 < other._a00\n\t}\n\n\t/**\n\t * Bitwise OR\n\t * @method or\n\t * @param {Object} other UINT64\n\t * @return ThisExpression\n\t */\n\tUINT64.prototype.or = function (other) {\n\t\tthis._a00 |= other._a00\n\t\tthis._a16 |= other._a16\n\t\tthis._a32 |= other._a32\n\t\tthis._a48 |= other._a48\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise AND\n\t * @method and\n\t * @param {Object} other UINT64\n\t * @return ThisExpression\n\t */\n\tUINT64.prototype.and = function (other) {\n\t\tthis._a00 &= other._a00\n\t\tthis._a16 &= other._a16\n\t\tthis._a32 &= other._a32\n\t\tthis._a48 &= other._a48\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise XOR\n\t * @method xor\n\t * @param {Object} other UINT64\n\t * @return ThisExpression\n\t */\n\tUINT64.prototype.xor = function (other) {\n\t\tthis._a00 ^= other._a00\n\t\tthis._a16 ^= other._a16\n\t\tthis._a32 ^= other._a32\n\t\tthis._a48 ^= other._a48\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise NOT\n\t * @method not\n\t * @return ThisExpression\n\t */\n\tUINT64.prototype.not = function() {\n\t\tthis._a00 = ~this._a00 & 0xFFFF\n\t\tthis._a16 = ~this._a16 & 0xFFFF\n\t\tthis._a32 = ~this._a32 & 0xFFFF\n\t\tthis._a48 = ~this._a48 & 0xFFFF\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise shift right\n\t * @method shiftRight\n\t * @param {Number} number of bits to shift\n\t * @return ThisExpression\n\t */\n\tUINT64.prototype.shiftRight = UINT64.prototype.shiftr = function (n) {\n\t\tn %= 64\n\t\tif (n >= 48) {\n\t\t\tthis._a00 = this._a48 >> (n - 48)\n\t\t\tthis._a16 = 0\n\t\t\tthis._a32 = 0\n\t\t\tthis._a48 = 0\n\t\t} else if (n >= 32) {\n\t\t\tn -= 32\n\t\t\tthis._a00 = ( (this._a32 >> n) | (this._a48 << (16-n)) ) & 0xFFFF\n\t\t\tthis._a16 = (this._a48 >> n) & 0xFFFF\n\t\t\tthis._a32 = 0\n\t\t\tthis._a48 = 0\n\t\t} else if (n >= 16) {\n\t\t\tn -= 16\n\t\t\tthis._a00 = ( (this._a16 >> n) | (this._a32 << (16-n)) ) & 0xFFFF\n\t\t\tthis._a16 = ( (this._a32 >> n) | (this._a48 << (16-n)) ) & 0xFFFF\n\t\t\tthis._a32 = (this._a48 >> n) & 0xFFFF\n\t\t\tthis._a48 = 0\n\t\t} else {\n\t\t\tthis._a00 = ( (this._a00 >> n) | (this._a16 << (16-n)) ) & 0xFFFF\n\t\t\tthis._a16 = ( (this._a16 >> n) | (this._a32 << (16-n)) ) & 0xFFFF\n\t\t\tthis._a32 = ( (this._a32 >> n) | (this._a48 << (16-n)) ) & 0xFFFF\n\t\t\tthis._a48 = (this._a48 >> n) & 0xFFFF\n\t\t}\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise shift left\n\t * @method shiftLeft\n\t * @param {Number} number of bits to shift\n\t * @param {Boolean} allow overflow\n\t * @return ThisExpression\n\t */\n\tUINT64.prototype.shiftLeft = UINT64.prototype.shiftl = function (n, allowOverflow) {\n\t\tn %= 64\n\t\tif (n >= 48) {\n\t\t\tthis._a48 = this._a00 << (n - 48)\n\t\t\tthis._a32 = 0\n\t\t\tthis._a16 = 0\n\t\t\tthis._a00 = 0\n\t\t} else if (n >= 32) {\n\t\t\tn -= 32\n\t\t\tthis._a48 = (this._a16 << n) | (this._a00 >> (16-n))\n\t\t\tthis._a32 = (this._a00 << n) & 0xFFFF\n\t\t\tthis._a16 = 0\n\t\t\tthis._a00 = 0\n\t\t} else if (n >= 16) {\n\t\t\tn -= 16\n\t\t\tthis._a48 = (this._a32 << n) | (this._a16 >> (16-n))\n\t\t\tthis._a32 = ( (this._a16 << n) | (this._a00 >> (16-n)) ) & 0xFFFF\n\t\t\tthis._a16 = (this._a00 << n) & 0xFFFF\n\t\t\tthis._a00 = 0\n\t\t} else {\n\t\t\tthis._a48 = (this._a48 << n) | (this._a32 >> (16-n))\n\t\t\tthis._a32 = ( (this._a32 << n) | (this._a16 >> (16-n)) ) & 0xFFFF\n\t\t\tthis._a16 = ( (this._a16 << n) | (this._a00 >> (16-n)) ) & 0xFFFF\n\t\t\tthis._a00 = (this._a00 << n) & 0xFFFF\n\t\t}\n\t\tif (!allowOverflow) {\n\t\t\tthis._a48 &= 0xFFFF\n\t\t}\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise rotate left\n\t * @method rotl\n\t * @param {Number} number of bits to rotate\n\t * @return ThisExpression\n\t */\n\tUINT64.prototype.rotateLeft = UINT64.prototype.rotl = function (n) {\n\t\tn %= 64\n\t\tif (n == 0) return this\n\t\tif (n >= 32) {\n\t\t\t// A.B.C.D\n\t\t\t// B.C.D.A rotl(16)\n\t\t\t// C.D.A.B rotl(32)\n\t\t\tvar v = this._a00\n\t\t\tthis._a00 = this._a32\n\t\t\tthis._a32 = v\n\t\t\tv = this._a48\n\t\t\tthis._a48 = this._a16\n\t\t\tthis._a16 = v\n\t\t\tif (n == 32) return this\n\t\t\tn -= 32\n\t\t}\n\n\t\tvar high = (this._a48 << 16) | this._a32\n\t\tvar low = (this._a16 << 16) | this._a00\n\n\t\tvar _high = (high << n) | (low >>> (32 - n))\n\t\tvar _low = (low << n) | (high >>> (32 - n))\n\n\t\tthis._a00 = _low & 0xFFFF\n\t\tthis._a16 = _low >>> 16\n\t\tthis._a32 = _high & 0xFFFF\n\t\tthis._a48 = _high >>> 16\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise rotate right\n\t * @method rotr\n\t * @param {Number} number of bits to rotate\n\t * @return ThisExpression\n\t */\n\tUINT64.prototype.rotateRight = UINT64.prototype.rotr = function (n) {\n\t\tn %= 64\n\t\tif (n == 0) return this\n\t\tif (n >= 32) {\n\t\t\t// A.B.C.D\n\t\t\t// D.A.B.C rotr(16)\n\t\t\t// C.D.A.B rotr(32)\n\t\t\tvar v = this._a00\n\t\t\tthis._a00 = this._a32\n\t\t\tthis._a32 = v\n\t\t\tv = this._a48\n\t\t\tthis._a48 = this._a16\n\t\t\tthis._a16 = v\n\t\t\tif (n == 32) return this\n\t\t\tn -= 32\n\t\t}\n\n\t\tvar high = (this._a48 << 16) | this._a32\n\t\tvar low = (this._a16 << 16) | this._a00\n\n\t\tvar _high = (high >>> n) | (low << (32 - n))\n\t\tvar _low = (low >>> n) | (high << (32 - n))\n\n\t\tthis._a00 = _low & 0xFFFF\n\t\tthis._a16 = _low >>> 16\n\t\tthis._a32 = _high & 0xFFFF\n\t\tthis._a48 = _high >>> 16\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Clone the current _UINT64_\n\t * @method clone\n\t * @return {Object} cloned UINT64\n\t */\n\tUINT64.prototype.clone = function () {\n\t\treturn new UINT64(this._a00, this._a16, this._a32, this._a48)\n\t}\n\n\tif (typeof define != 'undefined' && define.amd) {\n\t\t// AMD / RequireJS\n\t\tdefine([], function () {\n\t\t\treturn UINT64\n\t\t})\n\t} else if (typeof module != 'undefined' && module.exports) {\n\t\t// Node.js\n\t\tmodule.exports = UINT64\n\t} else {\n\t\t// Browser\n\t\troot['UINT64'] = UINT64\n\t}\n\n})(this)\n","exports.UINT32 = require('./lib/uint32')\nexports.UINT64 = require('./lib/uint64')","const { UINT32, UINT64 } = require(\"cuint\");\nconst { possiblePatterns, patternReducer } = require(\"./optimizer\");\n\nconst initCalc = (arg, plus) =>\n  UINT32(0x6c078965)\n    .multiply(arg.clone().xor(arg.clone().shiftRight(30)))\n    .add(UINT32(plus));\n\nconst initContext = (seed) => {\n  const $c0 = initCalc(UINT32(seed), 1);\n  const $c1 = initCalc($c0, 2);\n  const $c2 = initCalc($c1, 3);\n  const $c3 = initCalc($c2, 4);\n  return [$c0, $c1, $c2, $c3];\n};\n\nconst getUINT32 = ($c) => {\n  const [$c0, $c1, $c2, $c3] = $c;\n  const n = $c0.clone().xor($c0.clone().shiftLeft(11));\n\n  $c.splice(\n    0,\n    5,\n    $c1,\n    $c2,\n    $c3,\n    n\n      .clone()\n      .xor(n.clone().shiftRight(8))\n      .xor($c3)\n      .xor($c3.clone().shiftRight(19))\n  );\n\n  return $c[3].clone();\n};\n\nconst randint = ($c, min, max) => {\n  return UINT64(getUINT32($c).toNumber())\n    .multiply(UINT64(max).subtract(UINT64(min)).add(UINT64(1)))\n    .shiftRight(32)\n    .add(UINT64(min))\n    .toNumber();\n};\n\nconst randfloat = ($c, a, b) => {\n  const val = UINT32(0x3f800000).or(getUINT32($c).shiftRight(9)).toNumber();\n\n  const view = new DataView(new ArrayBuffer(32));\n  view.setUint32(0, val);\n\n  const valf = view.getFloat32();\n\n  return a + (valf - 1.0) * (b - a);\n};\n\nconst randbool = ($c) => {\n  return getUINT32($c).and(UINT32(0x80000000)).toNumber();\n};\n\nconst intceil = (val) => {\n  return Math.trunc(val + 0.99999);\n};\n\nfunction* calculate(seed, pattern) {\n  const $c = initContext(seed);\n  const basePrice = randint($c, 90, 110);\n  yield basePrice;\n  const chance = randint($c, 0, 99);\n\n  // select the next pattern\n  let whatPattern;\n\n  switch (pattern) {\n    case 0:\n      if (chance < 20) {\n        whatPattern = 0;\n      } else if (chance < 50) {\n        whatPattern = 1;\n      } else if (chance < 65) {\n        whatPattern = 2;\n      } else {\n        whatPattern = 3;\n      }\n      break;\n    case 1:\n      if (chance < 50) {\n        whatPattern = 0;\n      } else if (chance < 55) {\n        whatPattern = 1;\n      } else if (chance < 75) {\n        whatPattern = 2;\n      } else {\n        whatPattern = 3;\n      }\n      break;\n    case 2:\n      if (chance < 25) {\n        whatPattern = 0;\n      } else if (chance < 70) {\n        whatPattern = 1;\n      } else if (chance < 75) {\n        whatPattern = 2;\n      } else {\n        whatPattern = 3;\n      }\n      break;\n    case 3:\n      if (chance < 45) {\n        whatPattern = 0;\n      } else if (chance < 70) {\n        whatPattern = 1;\n      } else if (chance < 85) {\n        whatPattern = 2;\n      } else {\n        whatPattern = 3;\n      }\n      break;\n    default:\n      whatPattern = 2;\n      break;\n  }\n\n  yield whatPattern;\n\n  const sellPrices = new Array(14);\n  sellPrices[0] = basePrice;\n  sellPrices[1] = basePrice;\n\n  let work;\n  let decPhaseLen1;\n  let decPhaseLen2;\n  let peakStart;\n  let hiPhaseLen1;\n  let hiPhaseLen2and3;\n  let hiPhaseLen3;\n  let rate;\n\n  switch (whatPattern) {\n    case 0:\n      // PATTERN 0: high, decreasing, high, decreasing, high\n      work = 2;\n      decPhaseLen1 = randbool($c) ? 3 : 2;\n      decPhaseLen2 = 5 - decPhaseLen1;\n\n      hiPhaseLen1 = randint($c, 0, 6);\n      hiPhaseLen2and3 = 7 - hiPhaseLen1;\n      hiPhaseLen3 = randint($c, 0, hiPhaseLen2and3 - 1);\n\n      // high phase 1\n      for (let i = 0; i < hiPhaseLen1; i += 1) {\n        yield (sellPrices[work++] = intceil(\n          randfloat($c, 0.9, 1.4) * basePrice\n        ));\n      }\n\n      // decreasing phase 1\n      rate = randfloat($c, 0.8, 0.6);\n      for (let i = 0; i < decPhaseLen1; i++) {\n        yield (sellPrices[work++] = intceil(rate * basePrice));\n        rate -= 0.04;\n        rate -= randfloat($c, 0, 0.06);\n      }\n\n      // high phase 2\n      for (let i = 0; i < hiPhaseLen2and3 - hiPhaseLen3; i++) {\n        yield (sellPrices[work++] = intceil(\n          randfloat($c, 0.9, 1.4) * basePrice\n        ));\n      }\n\n      // decreasing phase 2\n      rate = randfloat($c, 0.8, 0.6);\n      for (let i = 0; i < decPhaseLen2; i++) {\n        yield (sellPrices[work++] = intceil(rate * basePrice));\n        rate -= 0.04;\n        rate -= randfloat($c, 0, 0.06);\n      }\n\n      // high phase 3\n      for (let i = 0; i < hiPhaseLen3; i++) {\n        yield (sellPrices[work++] = intceil(\n          randfloat($c, 0.9, 1.4) * basePrice\n        ));\n      }\n      break;\n    case 1:\n      // PATTERN 1: decreasing middle, high spike, random low\n      peakStart = randint($c, 3, 9);\n      rate = randfloat($c, 0.9, 0.85);\n      for (work = 2; work < peakStart; work++) {\n        yield (sellPrices[work] = intceil(rate * basePrice));\n        rate -= 0.03;\n        rate -= randfloat($c, 0, 0.02);\n      }\n      yield (sellPrices[work++] = intceil(randfloat($c, 0.9, 1.4) * basePrice));\n      yield (sellPrices[work++] = intceil(randfloat($c, 1.4, 2.0) * basePrice));\n      yield (sellPrices[work++] = intceil(randfloat($c, 2.0, 6.0) * basePrice));\n      yield (sellPrices[work++] = intceil(randfloat($c, 1.4, 2.0) * basePrice));\n      yield (sellPrices[work++] = intceil(randfloat($c, 0.9, 1.4) * basePrice));\n      for (; work < 14; work++) {\n        yield (sellPrices[work] = intceil(randfloat($c, 0.4, 0.9) * basePrice));\n      }\n      break;\n    case 2:\n      // PATTERN 2: consistently decreasing\n      rate = 0.9;\n      rate -= randfloat($c, 0, 0.05);\n      for (work = 2; work < 14; work++) {\n        yield (sellPrices[work] = intceil(rate * basePrice));\n        rate -= 0.03;\n        rate -= randfloat($c, 0, 0.02);\n      }\n      break;\n    case 3:\n      // PATTERN 3: decreasing, spike, decreasing\n      peakStart = randint($c, 2, 9);\n\n      // decreasing phase before the peak\n      rate = randfloat($c, 0.9, 0.4);\n      for (work = 2; work < peakStart; work++) {\n        yield (sellPrices[work] = intceil(rate * basePrice));\n        rate -= 0.03;\n        rate -= randfloat($c, 0, 0.02);\n      }\n\n      yield (sellPrices[work++] = intceil(randfloat($c, 0.9, 1.4) * basePrice));\n      yield (sellPrices[work++] = intceil(randfloat($c, 0.9, 1.4) * basePrice));\n      rate = randfloat($c, 1.4, 2.0);\n      yield (sellPrices[work++] =\n        intceil(randfloat($c, 1.4, rate) * basePrice) - 1);\n      yield (sellPrices[work++] = intceil(rate * basePrice));\n      yield (sellPrices[work++] =\n        intceil(randfloat($c, 1.4, rate) * basePrice) - 1);\n\n      // decreasing phase after the peak\n      if (work < 14) {\n        rate = randfloat($c, 0.9, 0.4);\n        for (; work < 14; work++) {\n          yield (sellPrices[work] = intceil(rate * basePrice));\n          rate -= 0.03;\n          rate -= randfloat($c, 0, 0.02);\n        }\n      }\n      break;\n    default:\n      break;\n  }\n}\n\nconst $average = (array, index, count, next) =>\n  array.splice(index, 1, (count * array[index] + next) / (count + 1));\n\nconst $minMax = (current, result) => {\n  if (current[0] > result) current.splice(0, 1, result);\n  if (current[1] < result) current.splice(1, 1, result);\n};\n\nconst makePaternFilter = (patterns) => {\n  return patterns\n    .map((options, i) => [options.length, i])\n    .filter(([v]) => v)\n    .map(([, i]) => i);\n};\n\nconst optimizeFilters = (filters) => {\n  const [basePrice = 0] = filters;\n  const patterns = possiblePatterns(filters);\n  const minMaxPatterns = patternReducer(patterns);\n  // Create a copy, with size 14. [baseprice, patterns, ...weekPrices]\n  const $filters = Array.from({ length: 14 }, (val, i) => filters[i + 1] || 0);\n\n  const patternFilter = makePaternFilter(patterns);\n  return $filters.map((filter, index) => {\n    if (index === 0) {\n      return [basePrice] || minMaxPatterns[0];\n    }\n    if (index === 1) {\n      return patternFilter;\n    }\n    return filter ? [filter, filter] : minMaxPatterns[index];\n  });\n};\n\nfunction* yieldCalculate(filters = []) {\n  let count = 0;\n  let total = 0;\n  const average = Array.from({ length: 13 }, () => 0);\n  const minMax = Array.from({ length: 13 }, () => [Infinity, -Infinity]);\n  const results = Array.from({ length: 13 }, () => 0);\n  const $filters = optimizeFilters(filters);\n  const randomStart = Math.trunc(Math.random() * 0xffffffff);\n  for (let i = 0; i < 0xffffffff; i++) {\n    for (let ii = 0; ii < 4; ii++) {\n      const calculator = calculate((randomStart + i) % 0xffffffff, ii);\n      const success = $filters.every((filter, index) => {\n        const { value } = calculator.next();\n        // Short circuit more useless iterations\n        if (index === 0 && !filter.includes(value)) ii += 4;\n        if (index === 1 && !filter.includes(value)) ii += 4;\n\n        // Copy the resulting array\n        results.splice(index, 1, value);\n        const [min, max] = filter;\n        return min <= value && max >= value;\n      });\n      if (success) {\n        // eslint-disable-next-line no-loop-func\n        results.forEach((result, index) => {\n          $average(average, index, count, result);\n          $minMax(minMax[index], result);\n        });\n        count += 1;\n      }\n    }\n    total += 1;\n    yield [total, count, minMax, average];\n  }\n}\n\nfunction* yieldCalculateByTime(filters = [], ms) {\n  const calculator = yieldCalculate(filters);\n  let flag = Date.now();\n  let result = calculator.next();\n  while (!result.done) {\n    if (Date.now() - flag > ms) {\n      yield result.value;\n      flag = Date.now();\n    }\n    result = calculator.next();\n  }\n}\n\nmodule.exports = {\n  yieldCalculate,\n  yieldCalculateByTime,\n  initContext,\n  randint,\n  randfloat,\n  randbool,\n};\n","const { yieldCalculateByTime } = require(\"./calculator\");\n\nlet paused;\nlet instance;\nlet result;\n\nconst workUnit = () => {\n  if (!instance) return;\n  result = instance.next();\n  if (!result.done && !paused) {\n    setTimeout(workUnit, 0);\n  }\n  postMessage(result);\n};\n\nonmessage = ({ data: [action, ...args] }) => {\n  console.log(\"worker message received\", action);\n  switch (action) {\n    case \"start\":\n      paused = false;\n      instance = yieldCalculateByTime(args, 1000);\n      workUnit();\n      break;\n    case \"pause\":\n      paused = true;\n      break;\n    case \"stop\":\n      paused = true;\n      instance = null;\n      break;\n    case \"restart\":\n      paused = false;\n      if (!instance) instance = yieldCalculateByTime(args, 1000);\n      workUnit();\n      break;\n    default:\n      break;\n  }\n};\n"]}